#!/usr/bin/env python3
import argparse
import asyncio
import logging
import sys
import subprocess as sp

from watchgod import awatch


async def start_command(args):
    logging.info(f'Starting: {args.command} {" ".join(args.args)}')
    return await asyncio.create_subprocess_exec(args.command, *args.args, stdin=sp.DEVNULL)


async def main():
    logging.basicConfig(level=logging.INFO, format='==> %(message)s')
    
    parser = argparse.ArgumentParser(description='Monitor a given path, and run command on events')
    parser.add_argument('path', metavar='PATH', help='path to monitor')
    parser.add_argument('command', metavar='COMMAND', help='command to run.')
    parser.add_argument('args', metavar='ARGS', nargs=argparse.REMAINDER,
                        help='arguments to the command to run.')
    args = parser.parse_args()

    event_source = awatch(args.path)
    pending_changes = set()
    proc = None
    while True:
        next_change = asyncio.create_task(event_source.__anext__())
        proc_done =  asyncio.create_task(proc.wait()) if proc is not None else None
        to_wait = { next_change, proc_done } if proc_done is not None else { next_change }

        done, _ = await asyncio.wait(to_wait, return_when=asyncio.FIRST_COMPLETED)
        try:
            if next_change in done:
                pending_changes |= next_change.result()
            if proc_done in done:
                retcode = proc_done.result()
                proc = None
                if retcode != 0:
                    # failed to run command, propogate the error
                    logging.error(f'Command returned {retcode}, exiting')
                    sys.exit(retcode)

            if pending_changes:
                if proc is None:
                    logging.info(f'Detected changes in {next(iter(pending_changes))}')
                    proc = await start_command(args)
                    pending_changes = set()
                else:
                    logging.warning(f'Detected changes while command is running, will trigger the command once it finishes')
        except Exception:
            logging.exception('Caught exception, exiting')
            sys.exit(1)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
